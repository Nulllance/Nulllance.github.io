<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Deploy</title>
      <link href="/2023/04/15/hexo/deploy/"/>
      <url>/2023/04/15/hexo/deploy/</url>
      
        <content type="html"><![CDATA[<h1 id="Deploy-部署"><a href="#Deploy-部署" class="headerlink" title="Deploy (部署)"></a>Deploy (部署)</h1><p><img src="https://github.com/Nulllance/PicturePlace/blob/main/hexo/image.png?raw=true" alt="imageDeploy"></p><blockquote><p>部署是将网站发布到服务器上的过程，这里使用的是 <a href="https://pages.github.com/">Github Pages</a> 作为服务器。</p></blockquote><p><a href="https://hexo.io/docs/github-pages">官方文档</a>有详细介绍，这里不再赘述，只是补充一下官方文档中没有提到的一些问题。</p><p>如果你之前没有在 github 上面部署过项目，那么下面是一些你需要注意的点。</p><h2 id="github-上传文件"><a href="#github-上传文件" class="headerlink" title="github 上传文件"></a>github 上传文件</h2><p>推荐先在 GitHub 上面创建一个仓库，然后将仓库克隆到本地，然后在文件夹中将 hexo 生成的所有文件放入其中，然后将文件夹上传到 GitHub 上面。</p><pre><code class="bash">$ git add .$ git commit -m &quot;first commit&quot;$ git push</code></pre><h2 id="github-pages-yml"><a href="#github-pages-yml" class="headerlink" title="github pages.yml"></a>github pages.yml</h2><p>pages.yml 文件是用来配置 github pages 的，简单来说这个是用来自动化部署的，当你在本地修改了文件，然后 push 到 github 上面，github pages 会自动帮你部署到服务器上面。</p><p>在本地相关路径（具体路径见下文）创建一个 pages.yml 文件，然后将下面的代码复制到 pages.yml 文件中。</p><pre><code class="yaml">.github/workflows/pages.ymlname: Pageson:  push:    branches:      - main  # default branchjobs:  pages:    runs-on: ubuntu-latest    permissions:      contents: write    steps:      - uses: actions/checkout@v3        with:          token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;          # If your repository depends on submodule, please see: https://github.com/actions/checkout          submodules: recursive      - name: Use Node.js 16.x        uses: actions/setup-node@v2        with:          node-version: &#39;16&#39;      - name: Cache NPM dependencies        uses: actions/cache@v2        with:          path: node_modules          key: $&#123;&#123; runner.OS &#125;&#125;-npm-cache          restore-keys: |            $&#123;&#123; runner.OS &#125;&#125;-npm-cache      - name: Install Dependencies        run: npm install      - name: Build        run: npm run build      - name: Deploy        uses: peaceiris/actions-gh-pages@v3        with:          github_token: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;          publish_dir: ./public</code></pre><blockquote><p><strong>Attention!</strong> 创建后，应该再次 add , commit, push 一下，这样 github pages 才会自动帮你部署到服务器上面。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> deploy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> deploy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo quick start</title>
      <link href="/2023/04/15/hexo/quick_start/"/>
      <url>/2023/04/15/hexo/quick_start/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-快速启动"><a href="#Hexo-快速启动" class="headerlink" title="Hexo 快速启动"></a>Hexo 快速启动</h1><p><img src="https://github.com/Nulllance/PicturePlace/blob/main/hexo/1892.jpeg?raw=true" alt="backgroundImage"></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>​ <a href="https://hexo.io/zh-cn/">Hexo</a> 是一个快速生成个人博客网页的模板工具生成器，通过对 Hexo 的简单使用，我们可以将 <a href="https://www.markdownguide.org/getting-started/#how-does-it-work">markdown</a> 格式的文件生成博客网页。和其他的生成工具不同，例如：<a href="https://www.sphinx-doc.org/en/master/">sphinx</a>， Hexo 生态更为完善，结构设计更为合理，支持多语言的学习，官网内容更容易看懂。为了能暂时跳过教程，快速生成网页（其实看官网只需要花 3 小时，但是有很多功能暂时不需要用到），接下来，我将通过更加直观详细而非官方的教学步骤进行记录。让初学者都能快速建立自己的第一个博客网页。如果需要深入学习可以结合我的教程看官方文件。</p><h3 id="超快配置"><a href="#超快配置" class="headerlink" title="超快配置"></a>超快配置</h3><p>​ Hexo 通过命令可以超快生成一个默认的博客框架，在安装好 <a href="">nodejs</a> 和 <a href="https://git-scm.com/">git</a> 工具后，你可以直接通过下面指令快速生成。</p><p>​ <a href="../Software_Setting/node_installation.md">nodejs 安装教程</a> <a href=""> git 安装教程</a></p><p>​ window： win 键+r 键打开对话框， 输入 cmd，回车，依次输入以下命令。mac 打开终端，同理。</p><pre><code class="bash"># 利用npm 工具安装 hexo-cli 工具，该工具也叫 hexo 手脚架，是快速开发的工具。npm install hexo-cli -g# 初始新建一个 blog 名字的文件夹并将模板文件放入hexo init blog# 进入 blog 文件中cd blog# 安装相应依赖包npm install# 启动服务，点击链接即可看到模板 bloghexo server</code></pre><p>​ 以上命令就可以初步生成一个模板 blog ，接着我们只需要对一些文件进行配置就可以生成我们想要的博客。</p><p>​ 以下图片展示一些实际操作和效果图</p><hr><h4 id="命令效果图"><a href="#命令效果图" class="headerlink" title="命令效果图"></a>命令效果图</h4><p><img src="https://github.com/Nulllance/PicturePlace/blob/main/hexo/image-20230414112715652.png?raw=true" alt="image-20230414112715652"></p><h4 id="生成页面"><a href="#生成页面" class="headerlink" title="生成页面"></a>生成页面</h4><p><img src="https://github.com/Nulllance/PicturePlace/blob/main/hexo/image-20230414112809611.png?raw=true" alt="image-20230414112809611"></p><h4 id="文件目录结构"><a href="#文件目录结构" class="headerlink" title="文件目录结构"></a>文件目录结构</h4><p><img src="https://github.com/Nulllance/PicturePlace/blob/main/hexo/image-20230414122759794.png?raw=true" alt="image-20230414122759794"></p><hr><p>​ 接下来就要客制化我们想要的网页，请看<a href="configuration.md">下一章</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> quick start </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> quick start </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pug Introduction (介绍)</title>
      <link href="/2023/04/15/pug/intro/"/>
      <url>/2023/04/15/pug/intro/</url>
      
        <content type="html"><![CDATA[<h1 id="Pug-Introduction-介绍"><a href="#Pug-Introduction-介绍" class="headerlink" title="Pug Introduction (介绍)"></a>Pug Introduction (介绍)</h1><p><img src="https://github.com/Nulllance/PicturePlace/blob/main/pug/intro_image.png?raw=true" alt="Intro_image"></p><blockquote><p><a href="https://www.pugjs.cn/api/getting-started.html">pug</a> 是可以通过预设好的 .pug 模板文件进行批量生成 html 文件的工具。该工具可以将提供的数据传入 .pug 模板文件，并进行渲染形成 html 文件。</p></blockquote><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> pug </category>
          
          <category> introduction </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pug </tag>
            
            <tag> introduciton </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Some Problems</title>
      <link href="/2023/04/15/hexo/Problems/"/>
      <url>/2023/04/15/hexo/Problems/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="Claudia-主题下，代码没有高亮问题"><a href="#Claudia-主题下，代码没有高亮问题" class="headerlink" title="Claudia 主题下，代码没有高亮问题"></a>Claudia 主题下，代码没有高亮问题</h2><p><img src="https://github.com/Nulllance/PicturePlace/blob/main/hexo/image-20230415150730261.png?raw=true" alt="image-20230415150730261"></p><blockquote><p>这个问题在<a href="https://hexo.io/zh-cn/docs/syntax-highlight">官网</a>是有答案的，下图为快速操作，直接在_config.yml 文件中修改以下代码即可</p></blockquote><pre><code class="yaml"># _config.ymlhighlight:  enable: falseprismjs:  enable: false</code></pre><h2 id="还没解决的问题"><a href="#还没解决的问题" class="headerlink" title="还没解决的问题"></a>还没解决的问题</h2><h3 id="1-标题名字在哪里更改的问题"><a href="#1-标题名字在哪里更改的问题" class="headerlink" title="1. 标题名字在哪里更改的问题"></a>1. 标题名字在哪里更改的问题</h3>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> problems </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> problem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Configuration</title>
      <link href="/2023/04/15/hexo/configuration/"/>
      <url>/2023/04/15/hexo/configuration/</url>
      
        <content type="html"><![CDATA[<h1 id="配置（客制化）Customize"><a href="#配置（客制化）Customize" class="headerlink" title="配置（客制化）Customize"></a>配置（客制化）Customize</h1><p><img src="https://github.com/Nulllance/PicturePlace/blob/main/hexo/5941.jpeg?raw=true" alt="配置的图片"></p><p>​ 配置一些文件，将文件放置在合适的地方，加上几个命令即可完成对网站的建立。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>​ 在配置之前需要对 <a href="https://www.markdownguide.org/getting-started/#how-does-it-work">markdown</a> 格式和 <a href="https://yaml.org/spec/1.2.2/#chapter-2-language-overview">yaml</a> 格式有所了解，这两个都相对容易，就不多介绍。</p><h3 id="md-文件的一点小改动-Front-matter"><a href="#md-文件的一点小改动-Front-matter" class="headerlink" title="*.md 文件的一点小改动(Front-matter)"></a>*.md 文件的一点小改动(Front-matter)</h3><p>​ 在每个 md 文章的最上面应该添加以下的代码：</p><pre><code class="yaml">---# 该文件的标题title: Configuration# 这篇文章的作者author: lanceWu# 分类类别categories:    - hexo# 标签tag:    - hexo---</code></pre><p><code>如果文章有公式，需要下载 hexo-filter-mathjax 插件，并引用它</code></p><p><a href="https://github.com/next-theme/hexo-filter-mathjax">hexo-filter-mathjax github 地址</a></p><pre><code class="bash">$ npm install hexo-filter-mathjax$ hexo clean</code></pre><h4 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h4><pre><code class="yaml">---mathjax: true---</code></pre><h3 id="config-yml-修改"><a href="#config-yml-修改" class="headerlink" title="_config.yml 修改"></a>_config.yml 修改</h3><p>​ 文件里面大多数都看得懂，可以先不修改，具体内容看<a href="https://hexo.io/docs/configuration">官方文档</a></p><h2 id="文件设置"><a href="#文件设置" class="headerlink" title="文件设置"></a>文件设置</h2><p>​ 将 md 文章放在 source/_post 文件夹里面</p><h4 id="生成-Generate"><a href="#生成-Generate" class="headerlink" title="生成 Generate"></a>生成 Generate</h4><pre><code class="bash">$ hexo generate</code></pre><h4 id="提供服务-Server"><a href="#提供服务-Server" class="headerlink" title="提供服务 Server"></a>提供服务 Server</h4><pre><code class="bash">$ hexo server</code></pre><p>​ 到这里文档就可以基本生成了。</p><h2 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h2><p>​ 骚骚的主题是程序员的最爱，特别是拗不过女朋友的强烈要求要改个好看的主题的时候，就得修改一下主题，主题的修改也是很简单的，但是要注意的是主题要找到最新的版本。</p><h4 id="搜索主题"><a href="#搜索主题" class="headerlink" title="搜索主题"></a>搜索主题</h4><p>在<a href="https://github.com/">github</a>搜索 hexo-theme，也可在<a href="https://hexo.io/themes/">官网主题</a>，但是特别注意，官网主题里面的某些主题文档里面的操作步骤可能过时，不能成功布置，最好是在官网上面预览，然后在 GitHub 中搜索</p><img src="https://github.com/Nulllance/PicturePlace/blob/main/hexo/image-20230415120505750.png?raw=true" alt="image-20230415120505750" style="zoom: 33%;" /><h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><p>在 github 下载后，将压缩包放置 themes 文件夹下面，然后解压缩，改名，一般去掉 Hexo-theme-即可,这个名字修改成什么都无所谓，重要的是_config.yml 文件要一样。</p><p>安装必要的插件</p><p><strong>BTY</strong>，此外，也可通过 npm 下载。但是下载完主题是在 node_modules 文件夹下的，</p><h4 id="主题修改位置"><a href="#主题修改位置" class="headerlink" title="主题修改位置"></a>主题修改位置</h4><p>主题配置文件的修改，可以在主路径下的_config.landscape.yml 修改，如果你的主题是 fluid，那就是 _config.fluid.yml 下面修改，如果没有这个文件就自己创建一个。</p><h4 id="进阶，修改主题的样式"><a href="#进阶，修改主题的样式" class="headerlink" title="进阶，修改主题的样式"></a>进阶，修改主题的样式</h4><p>如果你对主题的布局或者样式有自己的想法，那就得把主题文献下载到 themes 文件夹下面自行更改里面的代码。</p><h4 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改 _config.yml"></a>修改 _config.yml</h4><pre><code># 找到这个theme，默认是landscape主题，改为和themes文件夹下相同名字的主题theme: landscape</code></pre><p>至此，重新 执行 hexo g 和 hexo s 命令，刷新页面即可</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
          <category> configuration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> configuration </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>autocrlf</title>
      <link href="/2020/05/26/git/autocrlf/"/>
      <url>/2020/05/26/git/autocrlf/</url>
      
        <content type="html"><![CDATA[<h1 id="autocrlf"><a href="#autocrlf" class="headerlink" title="autocrlf"></a>autocrlf</h1><p><img src="https://github.com/Nulllance/PicturePlace/blob/main/git/autocrlfImg.png?raw=true" alt="autocrlfImg"></p><h2 id="0-0-前言"><a href="#0-0-前言" class="headerlink" title="0.0 前言"></a>0.0 前言</h2><p>如果不想懂原理，直接按照下面的步骤操作即可。</p><ul><li>windows 系统下，git config –global core.autocrlf true</li><li>linux/Mac 系统下，git config –global core.autocrlf input</li></ul><h2 id="1-什么是回车与换行"><a href="#1-什么是回车与换行" class="headerlink" title="1. 什么是回车与换行"></a>1. 什么是回车与换行</h2><p>在了解这个参数含义之前我们需要了解什么是回车和换行。</p><h3 id="1-1-由来"><a href="#1-1-由来" class="headerlink" title="1.1 由来"></a>1.1 由来</h3><p>在计算机还没有出现之前，有一种叫做电传打字机（Teletype Model 33）的机械打字机，每秒钟可以打 10 个字符。但是它有一个问题，就是打完一行换行的时候，要用去 0.2 秒，正好可以打两个字符。要是在这 0.2 秒里面，又有新的字符传过来，那么这个字符将丢失。</p><p>于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字符。一个叫做“回车”，告诉打字机把打印头定位在左边界，不卷动滚筒；另一个叫做“换行”，告诉打字机把滚筒卷一格，不改变水平位置。</p><p>这就是“换行”和“回车”的由来。</p><h3 id="1-2-使用"><a href="#1-2-使用" class="headerlink" title="1.2 使用"></a>1.2 使用</h3><p>后来，计算机发明了，这两个概念也就被般到了计算机上。那时，存储器很贵，一些科学家认为在每行结尾加两个字符太浪费了，加一个就可以。于是，就出现了分歧。</p><p>回车 \r 本义是光标重新回到本行开头，r 的英文 return，控制字符可以写成 CR，即 Carriage Return</p><p>换行 \n 本义是光标往下一行（不一定到下一行行首），n 的英文 newline，控制字符可以写成 LF，即 Line Feed</p><p>符号 ASCII 码 意义</p><p>\n 10 换行 NL</p><p>\r 13 回车 CR</p><p>在不同的操作系统这几个字符表现不同，比如在 WIN 系统下，这两个字符就是表现的本义，在 UNIX 类系统，换行\n 就表现为光标下一行并回到行首，在 MAC 上，\r 就表现为回到本行开头并往下一行，至于 ENTER 键的定义是与操作系统有关的。通常用的 Enter 是两个加起来。</p><p>不同操作系统下的含义：</p><p>\n: UNIX 系统行末结束符</p><p>\r\n: window 系统行末结束符</p><p>\r: MAC OS 系统行末结束符</p><p>我们经常遇到的一个问题就是，Unix/Mac 系统下的文件在 Windows 里打开的话，所有文字会变成一行；而 Windows 里的文件在 Unix/Mac 下打开的话，在每行的结尾可能会多出一个^M 符号。</p><h3 id="1-3-软回车和硬回车"><a href="#1-3-软回车和硬回车" class="headerlink" title="1.3 软回车和硬回车"></a>1.3 软回车和硬回车</h3><p>再扩展一下回车的一些知识。</p><p>硬回车就是普通我们按回车产生的，它在换行的同时也起着段落分隔的作用。</p><p>软回车是用 Shift + Enter 产生的，它换行，但是并不换段，即前后两段文字在 Word 中属于同一“段”。在应用格式时你会体会到这一点。</p><p>软回车能使前后两行的行间距大幅度缩小，因为它不是段落标记，要和法定的段落标记——硬回车区别出来。硬回车的 html 代码是<p>..</p>，段落的内容就夹在里面，而软回车的代码很精悍：<br>。网页的文字如果复制到 word 中，则硬回车变为弯曲的箭头，软回车变为向下的箭头。</p><h2 id="2-什么是-autocrlf"><a href="#2-什么是-autocrlf" class="headerlink" title="2. 什么是 autocrlf"></a>2. 什么是 autocrlf</h2><p>假如你正在和其他人合作，他们在 Windows 上编程，而你却在其他系统上，在这些情况下，你可能会遇到行尾结束符问题。这是因为 Windows 使用回车和换行两个字符来结束一行，而 Mac 和 Linux 只使用换行一个字符。虽然这是小问题，但它会极大地扰乱跨平台协作。</p><p>Git 可以在你提交时自动地把行结束符 CRLF 转换成 LF，而在签出代码时把 LF 转换成 CRLF。用 core.autocrlf 来打开此项功能，如果是在 Windows 系统上，把它设置成 true，这样当签出代码时，LF 会被转换成 CRLF：</p><pre><code class="bash">git config --global core.autocrlf true</code></pre><p>表示要求 git 在提交时将 crlf 转换为 lf，而在检出时将 crlf 转换为 lf。</p><p>Linux 或 Mac 系统使用 LF 作为行结束符，因此你不想 Git 在签出文件时进行自动的转换；当一个以 CRLF 为行结束符的文件不小心被引入时你肯定想进行修正，把 core.autocrlf 设置成 input 来告诉 Git 在提交时把 CRLF 转换成 LF，签出时不转换：</p><pre><code class="bash">$ git config --global core.autocrlf input</code></pre><p>表示在提交时将 crlf 转换为 lf，而检出时不转换 。<br>这样会在 Windows 系统上的签出文件中保留 CRLF，会在 Mac 和 Linux 系统上，包括仓库中保留 LF。</p><p>如果你是 Windows 程序员，且正在开发仅运行在 Windows 上的项目，可以设置 false 取消此功能，把回车符记录在库中：</p><pre><code class="bash">$ git config --global core.autocrlf false</code></pre><p>表示在提交时不转换，检出时也不转换。</p><h2 id="3-CRLF-、CR-和-LF-详解"><a href="#3-CRLF-、CR-和-LF-详解" class="headerlink" title="3. CRLF 、CR 和 LF 详解"></a>3. CRLF 、CR 和 LF 详解</h2><ul><li>CR：Carriage Return，对应 ASCII 中转义字符\r，表示回车</li><li>LF：Linefeed，对应 ASCII 中转义字符\n，表示换行</li><li>CRLF：Carriage Return &amp; Linefeed，\r\n，表示回车并换行</li></ul><p>其中，CRLF 是 Windows 系统中的换行符，LF 是 Unix/Linux/Mac OS X 系统中的换行符，CR 是 Macintosh 系统中的换行符。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
